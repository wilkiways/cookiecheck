// Cookie Monitor Script - Production Minified Version
let previousCookies={},cookieHistory=[],MAX_HISTORY_ITEMS=100,trackingPatterns={affiliate:["affid","affiliate","partner","referral","ref","src","source","campaign"],tracking:["track","visitor","session","utm_","_ga","_gi","fbclid","gclid"],verification:["verify","access","auth","token","login","account","user","premium"],fingerprinting:["device","browser","canvas","webgl","fp_","uid","uuid","signature"]},cookieCategories={affiliate:"Affiliate Attribution",tracking:"Visitor Tracking",verification:"Verification System",fingerprinting:"Device Fingerprinting",analytics:"Analytics System"};function safeDOM(e){try{return e()}catch(e){return console.error("DOM operation failed:",e),null}}document.addEventListener("DOMContentLoaded",()=>{try{document.getElementById("refresh-btn")?.addEventListener("click",refreshCookieData),document.getElementById("clear-history-btn")?.addEventListener("click",clearHistory),refreshCookieData();const e=setInterval(refreshCookieData,5e3);window.addEventListener("beforeunload",()=>{clearInterval(e)})}catch(e){console.error("Initialization error:",e)}});function parseCookies(){try{const e={},t=document.cookie;if(t){const r=t.split(";");r.forEach(t=>{if(!t.trim())return;const r=t.trim().split("=");try{const t=decodeURIComponent(r[0]),o=r.length>1?decodeURIComponent(r[1]):"";e[t]=o}catch(t){const o=r[0].trim(),i=r.length>1?r[1]:"";e[o]=i}})}return e}catch(e){return console.error("Error parsing cookies:",e),{}}}function categorizeCookie(e,t){try{const r=String(e).toLowerCase(),o=t?String(t).toLowerCase():"";for(const[e,i]of Object.entries(trackingPatterns)){if(i.some(e=>r.includes(e)))return cookieCategories[e]||e;if(o&&i.some(e=>o.includes(e)))return cookieCategories[e]||e}return r.match(/^_ga|^_gi|^analytics|stats|pixel|event|conversion|visit/i)?"Analytics System":"Unknown"}catch(e){return console.error("Error categorizing cookie:",e),"Unknown"}}function isAttributionCookie(e,t){try{return t.includes("Affiliate")||t.includes("Tracking")||t.includes("Verification")||t.includes("Fingerprinting")||t.includes("Analytics")}catch(e){return console.error("Error checking attribution cookie:",e),!1}}function detectCookieChanges(e){try{const t=[];for(const r in e)previousCookies[r]?previousCookies[r]!==e[r]&&t.push({type:"modified",name:r,oldValue:previousCookies[r],newValue:e[r],timestamp:new Date}):t.push({type:"added",name:r,value:e[r],timestamp:new Date});for(const r in previousCookies)e[r]||t.push({type:"deleted",name:r,oldValue:previousCookies[r],timestamp:new Date});return t}catch(e){return console.error("Error detecting cookie changes:",e),[]}}function createCookieElement(e,t,r,o){const i=document.createElement("div");i.className="cookie-item";const n=e.replace(/</g,"&lt;").replace(/>/g,"&gt;"),a=String(t).replace(/</g,"&lt;").replace(/>/g,"&gt;"),c=r.replace(/</g,"&lt;").replace(/>/g,"&gt;");return i.innerHTML=`
        <div class="cookie-header">
            <span class="cookie-name">${n}</span>
            <span class="cookie-category ${c.toLowerCase().replace(/\s+/g,"-")}">${c}</span>
        </div>
        <div class="cookie-value">${a}</div>
    `,o&&i.classList.add("cross-origin"),i}function updateCookieDisplay(e){try{const t=document.getElementById("cookie-list"),r=document.getElementById("cross-origin-cookies");if(!t||!r)return;if(t.innerHTML="",r.innerHTML="",0===Object.keys(e).length)return t.innerHTML='<p class="no-cookies">No cookies found</p>',void(r.innerHTML='<p class="no-cookies">No attribution cookies detected</p>');const o=document.createDocumentFragment(),i=document.createDocumentFragment();let n=0;for(const t in e){const r=e[t],a=categorizeCookie(t,r),c=isAttributionCookie(t,a),s=createCookieElement(t,r,a,c);c&&(i.appendChild(s.cloneNode(!0)),n++),o.appendChild(s)}t.appendChild(o),0===n?r.innerHTML='<p class="no-cookies">No attribution cookies detected</p>':r.appendChild(i)}catch(e){console.error("Error updating cookie display:",e)}}function updateHistoryDisplay(){try{const e=document.getElementById("cookie-history");if(!e)return;if(e.innerHTML="",0===cookieHistory.length)return void(e.innerHTML='<p class="no-cookies">No cookie changes recorded</p>');const t=document.createDocumentFragment();cookieHistory.slice().reverse().forEach(r=>{const o=document.createElement("div");o.className=`history-item ${r.type}`;const i=r.timestamp.toLocaleTimeString();let n="";const a=r.name.replace(/</g,"&lt;").replace(/>/g,"&gt;");switch(r.type){case"added":const e=String(r.value).replace(/</g,"&lt;").replace(/>/g,"&gt;");n=`<strong>${a}</strong> was added with value: ${e}`;break;case"modified":const t=String(r.oldValue).replace(/</g,"&lt;").replace(/>/g,"&gt;"),c=String(r.newValue).replace(/</g,"&lt;").replace(/>/g,"&gt;");n=`<strong>${a}</strong> changed from "${t}" to "${c}"`;break;case"deleted":n=`<strong>${a}</strong> was deleted`}o.innerHTML=`
                <div class="history-time">${i}</div>
                <div class="history-content">${n}</div>
            `,t.appendChild(o)}),e.appendChild(t)}catch(e){console.error("Error updating history display:",e)}}function refreshCookieData(){try{const e=parseCookies(),t=detectCookieChanges(e);t.length>0&&(cookieHistory=[...cookieHistory,...t].slice(-MAX_HISTORY_ITEMS),updateHistoryDisplay()),updateCookieDisplay(e),previousCookies={...e}}catch(e){console.error("Error refreshing cookie data:",e)}}function clearHistory(){try{cookieHistory=[],updateHistoryDisplay()}catch(e){console.error("Error clearing history:",e)}} 